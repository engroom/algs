import java.util.Arrays;
import java.util.concurrent.ThreadLocalRandom;

/**
 * Gergely Puskas
 * gergely.puskas0903@gmail.com
 * QuickSelectV2 class to find the k-th smallest element in an array using the QuickSelect algorithm.
 */
public class QuickSelectV2 {

    /**
     * Selects the k-th smallest element from the given array.
     *
     * @param <T>      the type parameter that extends Comparable
     * @param elements the array of elements
     * @param k        the index of the k-th smallest element to find
     * @return the k-th smallest element
     * @throws IllegalArgumentException if k is less than 0 or greater than or equal to the length of the array
     */
    public static <T extends Comparable<? super T>> T select(T[] elements, int k) {
        if (k < 0) {
            throw new IllegalArgumentException(k + " must be zero or larger");
        }
        if (elements == null || elements.length < 1 || elements.length <= k) {
            throw new IllegalArgumentException("at least " + (k + 1) + " elements are required");
        }

        int low = 0;
        int high = elements.length - 1;
        int[] p = new int[2];
        while (low < high) {
            partition(elements, low, high, p);
            int lt = p[0];
            int gt = p[1];
            if (gt < k) {
                low = gt + 1;
            } else if (k < lt) {
                high = lt - 1;
            } else {
                return elements[k];
            }
        }
        return elements[k];
    }

    /**
     * Partitions the array into three parts: less than, equal to, and greater than the pivot element.
     *
     * @param <T>      the type parameter that extends Comparable
     * @param elements the array of elements
     * @param low      the lower bound of the partition
     * @param high     the upper bound of the partition
     * @param p        the array to store the partition indices
     */
    private static <T extends Comparable<? super T>> void partition(T[] elements, int low, int high, int[] p) {
        if (high <= low) {
            p[0] = low;
            p[1] = low;
            return;
        }

        // TBD if (high - low <= 7)

        int vIdx = pivotIdx(elements, low, high);
        T v = elements[vIdx];
        int i = low;
        int lt = low;
        int gt = high;
        while (i <= gt) {
            int comp = elements[i].compareTo(v);
            if (comp < 0) {
                exch(elements, lt++, i++);
            } else if (comp > 0) {
                exch(elements, gt--, i);
            } else {
                i++;
            }
        }
        p[0] = lt;
        p[1] = gt;
    }

    private static <T extends Comparable<? super T>>  int pivotIdx(T[] elements, int low, int high) {
        // Median 3
        int mid = (low + high) / 2;
        if (elements[mid].compareTo(elements[low]) < 0) {
            exch(elements, low, mid);
        }
        if (elements[high].compareTo(elements[low]) < 0) {
            exch(elements, low, high);
        }
        if (elements[high].compareTo(elements[mid]) < 0) {
            exch(elements, mid, high);
        }
        // or  return low + ThreadLocalRandom.current().nextInt(high - low + 1);
        return mid;
    }
    /**
     * Exchanges the elements at the given indices in the array.
     *
     * @param <T>      the type parameter that extends Comparable
     * @param elements the array of elements
     * @param i        the index of the first element
     * @param j        the index of the second element
     */
    private static <T extends Comparable<? super T>> void exch(T[] elements, int i, int j) {
        T tmp = elements[i];
        elements[i] = elements[j];
        elements[j] = tmp;
    }
}
